import asyncio
from flask import Flask
from flask_restx import Api, Resource, fields

app = Flask(__name__)
api = Api(app)

# Define your DTO (Data Transfer Object)
breaks_response = api.model('BreaksResponse', {
    'message': fields.String,
})

async def email_latest_breaks(rule_id: int, **kwargs):
    try:
        # Your existing try block code here

    except exc.SQLAlchemyError as e:
        current_app.logger.error(f"SQLAlchemy error while getting latest breaks for rule_id {rule_id}: {e}")
        # No return statement here

@api.route('/your_endpoint')
class YourResource(Resource):
    @api.expect(api.model('BreaksRequest', {
        'rule_id': fields.Integer,
    }), validate=True)
    @api.marshal_with(breaks_response, code=200)
    def post(self):
        rule_id = api.payload['rule_id']
        asyncio.create_task(email_latest_breaks(rule_id, **request.kwargs))
        return {"message": "We have received your email request for your break, an email will be sent to you shortly"}, 200

if __name__ == '__main__':
    app.run(debug=True)
