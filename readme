from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Employee(db.Model):
    __tablename__ = 'your_table_name'  # Replace with your actual table name

    SID = db.Column(db.String(10), primary_key=True)
    EMAIL = db.Column(db.String(100))
    VERUMIDENTIFIER = db.Column(db.String(30), nullable=False)
    STATUS = db.Column(db.String(15))
    MANAGERSID = db.Column(db.String(10), db.ForeignKey('your_table_name.SID')) # assuming self-referencing table for hierarchy
    GTI_EMPLOYEE = db.Column(db.String(2))
    CHIP_EMPLOYEE = db.Column(db.String(2))
    LOB_EMPLOYEE = db.Column(db.String(2))
    GS_REPORTS = db.Column(db.String(10))
    VG_REPORTS = db.Column(db.String(10))
    PG_REPORTS = db.Column(db.String(10))
    MK_REPORTS = db.Column(db.String(10))
    JT_REPORTS = db.Column(db.String(10))
    PH_REPORTS = db.Column(db.String(10))
    ML_REPORTS = db.Column(db.String(10))
    DL_REPORTS = db.Column(db.String(10))
    JE_REPORTS = db.Column(db.String(10))
    AG_REPORTS = db.Column(db.String(10))
    GS_LVL2 = db.Column(db.String(10))
    GS_LVL3 = db.Column(db.String(10))
    LEVELS_FROM_CEO = db.Column(db.Integer)
    CORPORATE_TITLE = db.Column(db.String(100))

    # For hierarchical relationships
    manager = db.relationship('Employee', remote_side=[SID], backref=db.backref('subordinates', lazy='dynamic'))
