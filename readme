@staticmethod
def get_profiling_results(profile_id):
    max_run_id = execute_raw_oracle(MAX_RUN_ID.format(profile_id=profile_id))
    if max_run_id := max_run_id.first()[0]:
        result = (
            db.session.query(ProfileRsltsMastModel, ProfileDetailsMasterModel, DqaasProcRunSumModel.strt_tm, DqaasCnsmrApplModel.appl_nm, DqaasCnsmrApplModel.appl_id)
            .join(ProfileDetailsMasterModel, ProfileDetailsMasterModel.profile_id == ProfileRsltsMastModel.profile_id)
            .join(DqaasCnsmrApplModel, DqaasCnsmrApplModel.CNSMR_INGESTION_ID == ProfileDetailsMasterModel.cnsmr_ingestion_id)
            .join(DqaasProcRunSumModel, DqaasProcRunSumModel.run_id == ProfileRsltsMastModel.run_id)
            .filter(
                ProfileRsltsMastModel.profile_id == profile_id,
                ProfileRsltsMastModel.run_id == max_run_id
            )
            .all()
        )
        return result
    else:
        return None




class ProfileDetailsMasterSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = ProfileDetailsMasterModel
        include_fk = True
        load_instance = True
        transient = True

    appl_nm = fields.String()
    appl_id = fields.Integer()
